### Toujours vérifier si une commande est disponible
command -v jq >/dev/null 2>&1 || { echo "jq est requis mais non installé !"; exit 1; }

### Exécuter une commande et utiliser son résultat comme fichier d’entrée
diff <(ls dossier1) <(ls dossier2)

### Exécuter des commandes en parallèle 
commande1 & commande2 & commande3 & wait

### Stopper une commande après un certain temps + SIGTERM
timeout 5s commande
### ++ SIGKILL donc à favoriser
timeout --kill-after=2m 30m script_appli.sh
timeout 5s commande || echo "Commande échouée (timeout)"

### Relancer une commande jusqu'à réussite (ex: connexion instable)
until timeout 5m curl -sSf http://example.com; do
    echo "Réessai..."
    sleep 30
done

### Lance un script en arrière-plan mais le force à ne pas dépasser 10 minutes.
timeout 10m ./tache_lourde.sh & 

### Remplacement conditionnel de variables avec ${VAR:-default}
nom=${1:-"Anonyme"}  # Si $1 n'est pas défini, utilise "Anonyme"
echo "Bonjour ${USER_NAME:-Invité}"

### check variable
nom=${1:?"Erreur : Vous devez spécifier un nom en argument"}

### fichier="/home/user/document.txt"
echo "${fichier#*/}"  # Supprime le premier "/" → "home/user/document.txt"
echo "${fichier##*/}"  # Supprime tout avant et y compris le dernier "/" → "document.txt"
nom="fichier.txt"
echo "${nom%.*}"  # Supprime la plus petite occurrence de ".*" à la fin → "fichier"

### connaitre longueur variable
chaine="Hello"
echo "${#chaine}"  # Affiche "5"

### prends les 3 last carac
echo "${chaine: -3}"  # "def" (prend les 3 derniers caractères)

### convert minuscule et maj
echo "${chaine,,}"  # Convertit en minuscules
echo "${chaine^^}"  # Convertit en majuscules

### mktemp pour traiter de manière temporaire et jetable
tmpfile=$(mktemp)
echo "Traitement" > "$tmpfile"
rm -f "$tmpfile"  # Nettoyage automatique

### limiter les ressources d'un script
ulimit -t 60   # Limite l'exécution à 60 secondes
ulimit -m 50000  # Limite la mémoire à 50 Mo

###  Rediriger toute la sortie du script vers un log :
exec > >(tee -a script.log) 2>&1

### clean en cas d'exit
trap 'rm -f /tmp/fichier_temporaire' EXIT

### Vérifier que les processus sont en cours avant de tenter de les démarrer ou de les arrêter
if ! pgrep -x "mon_processus" > /dev/null; then
  systemctl start mon_service
fi

### Vérifier que les services sont dans l'état souhaité avant de les démarrer/arrêter 
if ! systemctl is-active --quiet nom_du_service; then
    systemctl start nom_du_service
fi

### Ne pas redéfinir des configurations déjà appliquées (check)
if ! grep -q "ConfigOption" /chemin/du/fichier_conf; then
  echo "ConfigOption=true" >> /chemin/du/fichier_conf
fi

### check si on peut écrire dans un fichier
if [ ! -w /chemin/du/fichier ]; then
  echo "Le fichier n'a pas les permissions d'écriture"
fi

### qui consomme pcu ?
ps -eo pid,comm,%cpu --sort=-%cpu | head


